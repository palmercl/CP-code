#create table for chi square test of mood change
dat_2<-data.frame(score=c(dat_1$score_bin,dat_1$anger_bin,dat_1$confus_bin,dat_1$sad_bin,
dat_1$energy_bin,dat_1$anxiety_bin,dat_1$tired_bin),
emotion=rep(c('Total','Anger','Confusion','Sadness','Energy','Anxiety','Fatigue'),each=nrow(dat_1)))
y<-table(dat_2$score,dat_2$emotion)
y.prop<-prop.table(y,2)
y_p<-chisq.test(y)
#table
tab.1<-data.frame(var=c('Change','No','Yes'),
a=c(" ",paste(y[,1],paste0("(",round(y.prop[,1]*100,0),"%",")"))),
b=c(" ",paste(y[,2],paste0("(",round(y.prop[,2]*100,0),"%",")"))),
c=c(" ",paste(y[,3],paste0("(",round(y.prop[,3]*100,0),"%",")"))),
d=c(" ",paste(y[,4],paste0("(",round(y.prop[,4]*100,0),"%",")"))),
e=c(" ",paste(y[,5],paste0("(",round(y.prop[,5]*100,0),"%",")"))),
f=c(" ",paste(y[,6],paste0("(",round(y.prop[,6]*100,0),"%",")"))),
g=c(" ",paste(y[,7],paste0("(",round(y.prop[,7]*100,0),"%",")"))),
pval=c("<0.001",rep(" ",length(rownames(y)))),row.names=NULL)
colnames(tab.1)<-c("",colnames(y),"P-value")
dat_1[36:42]
source('00_data.R')
1555*.5
777.5*.35
777.5*.65
5173-440
4733-400
4333-971
x<-c(5,4,3,2,1)
y<-c(1,2,3,4,5)
t.test(x,y)
t.test(x,y,paired=T)
6*160
96/12
197+138+139
377+102
318+162
5073-440
4633-400
4233-971
5323-375
4948-3262
2357-52
2305/4
2305/400
180*.2
180*.3
.5+1.25+.25+.25+1.25
180*.3
36*.8
28/180
.5 + 1.25+1+.25+1.5+3
log(2,10)
log(2)
help(log)
log10(2)
2^10
10^2
10^0.30103
exp(0.30103)
10^0.3013
log(2)
exp(2)
exp( 0.6931472)
e^0.6931472
10^7.4
1/25118864
exp(3.1800282459)
exp(3.1800282459)/(1+exp(3.1800282459))
exp(1.73801908345)/(1+exp(1.73801908345))
log(10.4) + log(5.26)
exp(log(10.4) + log(5.26))
10.4+5.26
80+440+500+971
3600-1991
3600-440
3160-80
3080-971
2109-500
3799-440
3359-500
2859-325
253.8(sqrt(10))
253.8*sqrt(10)
3.13*sqrt(3.13)
3.13*sqrt(10)
4.91*sqrt(10)
52.50-37.60
3.13*sqrt(10)
4.91*sqrt(10)
5000*.1
5000*.05
5697+250
1800/400
3799-940
2859-465.45
2392-500
765.54+385.20
76700*1.29
4*52
180+3799.25
3979.25-440
3539.25-500
3039.25-365.45
exp(2)/(1+exp(2))
exp(1)/(1+exp(1))
exp(1)
exp(0)
0.01-(1-0.01)
(0.01/(1-0.01))/(0.02/(1-0.02))
1/3
(0.01/(1-0.01))/(0.03/(1-0.03))
1/2.7
100+3799.25
3899.25-440
3459.25-500
2959.25-365.45
2593+100
2693+422
3115-2000
3796-530
1800/3
1800/13
3796.22-365.45
3430.77-530
2900+1500
4400-3688.07
exp(-0.933)
52+146+19+15+31
dat<-read.csv('C:\Users\palmercl\Dropbox\Sam_Claire_Test\Paper_2016\Data\IF_subject_level_data.csv')
dat<-read.csv('C:/Users/palmercl/Dropbox/Sam_Claire_Test/Paper_2016/Data/IF_subject_level_data.csv')
names(dat)
dat$pat.sum.CD4
dat<-read.csv('C:/Users/palmercl/Dropbox/Sam_Claire_Test/Paper_2016/Data/IF_subject_level_data.csv',na.strings=c('.'))
dat$pat.sum.CD4
hist(dat$pat.sum.CD4)
hist(log(dat$pat.sum.CD4))
hist(log(dat$pat.sum.Area/1000000))
hist(dat$pat.sum.Area/1000000)
dat$therapy
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']))
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']))
help(pch)
#Graphs#
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=1)
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=15)
#Graphs#
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=21)
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=19)
#Graphs#
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=21)
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=15)
#Graphs#
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=0)
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
#Graphs#
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22)
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
#Graphs#
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,2),ylim=c(2,6.5))
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2,6.5))
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2,6.5),
xaxt='n', yaxt='n')
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
axis(2,las=2)
axis(1)
max(log(dat$pat.sum.CD4[dat$therapy=='ral']))
min(log(dat$pat.sum.CD4[dat$therapy=='ral']))
min(log(dat$pat.sum.CD4[dat$therapy=='ral']))-.3
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2.75,6.5),
xaxt='n', yaxt='n')
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
axis(2,las=2)
axis(1)
min(log(dat$pat.sum.CD4))
min(log(dat$pat.sum.CD4),na.rm=T)
max(log(dat$pat.sum.CD4),na.rm=T)
min(log(dat$pat.sum.CD4),na.rm=T)-.3
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2.25,6.5),
xaxt='n', yaxt='n')
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
axis(2,las=2)
axis(1)
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2.25,6.5),
ylab=expression("Log"[e]*" CD4+ T Cell Count"),
xlab=expression("Log"[e]*" Area mm"^2),
xaxt='n', yaxt='n')
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
axis(2,las=2)
axis(1)
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2.25,6.5),
ylab=expression("Log"[e]*" CD4+ T Cell Count"),
xlab=expression("Log"[e]" Area mm"^2),
xaxt='n', yaxt='n')
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
axis(2,las=2)
axis(1)
plot(log(dat$pat.sum.Area[dat$therapy=='ral']/1000000),log(dat$pat.sum.CD4[dat$therapy=='ral']),pch=22,
xlim=c(0,1.75),ylim=c(2.25,6.5),
ylab=expression("Log"[e]" CD4+ T Cell Count"),
xlab=expression("Log"[e]" Area mm"^2),
xaxt='n', yaxt='n')
points(log(dat$pat.sum.Area[dat$therapy=='atz']/1000000),log(dat$pat.sum.CD4[dat$therapy=='atz']),pch=16)
axis(2,las=2)
axis(1)
4217-440
4217-564
3653-80
3573-200
4217*.1
4510-180
13548.68-4000
9548-2000
28.70/2
59.28+14.35
84.33+14.35
47.15+5.28+7.38
exp(3.6064)
exp(-2.1443)
exp(-2.1443+3.6064)
exp(4.315012)
74.81452/0.11715
1-exp(3.6064)
1-(exp(0.002-0.31))
exp(3.6064)-1
35.83321*100
0.11715*3583.321
exp(3.4726)
exp(0.002-0.31)
32.22041-1
0.27*100
31.22041*100
0.11715*31.22041
exp(-2.0453)
exp(-2.0453+3.4726)
4.167432/0.1293414
0.8890+0.7384
0.8890+0.7384+0.3310
#Simultaion for paper
#set seed for consistency
set.seed(12)
#use general function simul() to do a,b and c/ picture, section and subject level
source('00_sim_functions.R')
3981-440
3541-565
10759-900
9859-2000
7859-321
1981
1981-440
1541-565
976-80
7759-900
6859-321
6538-350
4446
4446-440
4006-565
7859-3412
7859-3000
4859-321
3675-895
1481-104
1377-465
4444-440
4004-565
3439-400
7258.16-321
6937.16-900
6937.16-900-435
dat<-read.csv('H:/Neonatology/Hwang/Data/PRAMS_tax_all.csv')
names(dat)
table(dat$SMKBef3m3)
table(dat$SmokingNow)
7258-900
6358-428
5930-320
4446-440
4446-500
4446-465
4006-500
3506-465
help(data)
data(list)
library(MASS)
data()
ChickWeight
names(UCBAdmissions)
UCBAdmissions
cars
iris
iris3
rock
sleep
cabbages
data_set_name<-'cabbages'
data_set_name
cabbages$VitC_di<-(cabbages$VitC<50)*1
cabbages$VitC_di
cabbages$VitC_di<-(cabbages$VitC<60)*1
cabbages$VitC_di
cabbages$VitC_di<-as.factor((cabbages$VitC<60)*1)
cabbages$VitC_di
cabbages$VitC_di<-as.factor((cabbages$VitC>60)*1)
#create dichotomous vitamin C variable
cabbages$VitC_di
levels(cabbages$VitC_di)=c("<=60",'>60')
cabbages$VitC_di
names(cabbages)
#Set Labels
label(data$Cult)="Type"
label(data$Headwt)='Head weight'
label(VitC)='Vitamin C level'
label(VitC_di)='Vitamin C level'
library(Hmisc)
label(data$Cult)="Type"
label(data$Headwt)='Head weight'
label(VitC)='Vitamin C level'
label(VitC_di)='Vitamin C level'
dat<-cabbage
dat<-cabbages
#set factor levels
levels(dat$VitC_di)=c("<=60",'>60')
#Set Labels
label(dat$Cult)="Type"
label(dat$Headwt)='Head weight'
label(dat$VitC)='Vitamin C level'
label(dat$VitC_di)='Vitamin C level'
#create dichotomous vitamin C variable
dat$VitC_di<-as.factor((dat$VitC>60)*1)
#set factor levels
levels(dat$VitC_di)=c("<=60",'>60')
#Set Labels
label(dat$Cult)="Type"
label(dat$Headwt)='Head weight'
label(dat$VitC)='Vitamin C level'
label(dat$VitC_di)='Vitamin C level'
names(dat)
label(dat$HeadWt)='Head weight'
iris
names(iris)
iris$Species
names(iris)
dat<-iris
dat$Sepal.Length
dat$Sepal.Length<-as.factor((dat$Sepal.Length<5)*1)
dat$Sepal.Length
levels(dat$VitC_di)=c("<5",'>=5')
dat<-iris
#create dichotomous vitamin C variable
dat$sepal_di<-as.factor((dat$Sepal.Length<5)*1)
#set factor levels
levels(dat$sepal_di)=c("<5",'>=5')
names(dat)
dat$Specied
dat$Species
level(dat$specied)=c('Setosa','Versicolor','Virginica')
levels(dat$specied)=c('Setosa','Versicolor','Virginica')
levels(dat$species)=c('Setosa','Versicolor','Virginica')
levels(dat$Species)=c('Setosa','Versicolor','Virginica')
names(dat)
data$Species
###################################################################
#use cabbage data for two group comparison
data<-iris
#create dichotomous vitamin C variable
data$sepal_di<-as.factor((data$Sepal.Length<5)*1)
#set factor levels
levels(data$sepal_di)=c("<5",'>=5')
levels(data$Species)=c('Setosa','Versicolor','Virginica')
#Set Labels
label(data$Sepal.Length)="Sepal Length"
label(data$Sepal.Width)='Sepal weight'
label(data$Petal.Length)='Petal Length'
label(data$Petal.Width)='Petal Width'
data$Species
dat<-data[data$Species!='Virginica',]
dat
source('00_Data_setup.R')
source('01_Row_functions.R')
source('02_Table_functions.R')
source('03_Model_functions.R')
library(knitr)
getwd()
setwd('C:/Repositories/CP-code/R code/Table code')
source('00_Data_setup.R')
source('01_Row_functions.R')
source('02_Table_functions.R')
source('03_Model_functions.R')
library(knitr)
data
dat<-data[data$Species!='Virginica',]
dat
a<-c('sepal_di') #categorical variables
b<-c('sepal_di') #categorical with only one row output
c<-c('Sepal.Length','Petal.Length') #continuous - regular mean
d<-c('Sepal.Width') #continuous - geometric mean
e<-'none' #continuous - geometric mean with +1-1
f<-'Petal.Width' #Wilcoxon rank-sum, median(IQR)
group<- dat$Species
tab_2_groups<-tab_2(a,b,c,d,e,f,group)
a<-c('sepal_di') #categorical variables
a
fx_section(a,dat$Species,prop_table,"")
fx_section(a,dat$Species,prop_table_one,"")
source('00_Data_setup.R')
source('01_Row_functions.R')
source('02_Table_functions.R')
source('03_Model_functions.R')
library(knitr)
#Use iris data with two categories
dat<-data[data$Species!='Virginica',]
a<-c('sepal_di') #categorical variables
b<-c('sepal_di') #categorical with only one row output
c<-c('Sepal.Length','Petal.Length') #continuous - regular mean
d<-c('Sepal.Width') #continuous - geometric mean
e<-'none' #continuous - geometric mean with +1-1
f<-'Petal.Width' #Wilcoxon rank-sum, median(IQR)
group<- dat$Species
tab_2_groups<-tab_2(a,b,c,d,e,f,group)
fx_section(c,dat$Species,mean_table,"")
fx_section(d,dat$Species,geom_table,"")
fx_section(f,dat$Species,wilcox_table,"")
#these functions work regardless of number of columns in table
#set column names with sample sizes
column_label<-function(x){
c("Variable",
paste0(levels(x)," (n=",table(x),")"),
"P Value")}
column_label(dat$Species)
dat$Species<-as.factor(as.character(dat$Species))
column_label(dat$Species)
a<-c('sepal_di') #categorical variables
b<-c('sepal_di') #categorical with only one row output
c<-c('Sepal.Length','Petal.Length') #continuous - regular mean
d<-c('Sepal.Width') #continuous - geometric mean
e<-'none' #continuous - geometric mean with +1-1
f<-'Petal.Width' #Wilcoxon rank-sum, median(IQR)
group<- dat$Species
tab_2_groups<-tab_2(a,b,c,d,e,f,group)
tab_2_groups
source('00_Data_setup.R')
source('01_Row_functions.R')
source('02_Table_functions.R')
source('03_Model_functions.R')
library(knitr)
####################################################################################################
####################################################################################################
#Descriptive Tables #
####################################################################################################
###########################################################
#Table for two categories- fill in variable list for each type of variable#
###########################################################
#Use iris data with two categories
dat<-data[data$Species!='Virginica',]
dat$Species<-as.factor(as.character(dat$Species))
###############
a<-c('sepal_di') #categorical variables
b<-c('sepal_di') #categorical with only one row output
c<-c('Sepal.Length','Petal.Length') #continuous - regular mean
d<-c('Sepal.Width') #continuous - geometric mean
e<-'none' #continuous - geometric mean with +1-1
f<-'Petal.Width' #Wilcoxon rank-sum, median(IQR)
group<- dat$Species
tab_2_groups<-tab_2(a,b,c,d,e,f,group)
tab_2_groups
dat<-data
############
a<-c('sepal_di') #categorical variables
b<-c('sepal_di') #categorical with only one row output
c<-c('Sepal.Length','Petal.Length') #continuous - regular mean
d<-c('Sepal.Width','Petal.Width') #continuous - geometric mean
e<-'none' #continuous - geometric mean with +1-1
group<-dat$Species # group variable
tab_3_groups<-tab_3(a,b,c,d,e,group)
tab_3_groups
kable(tab_2_groups)
kable(tab_3_groups)
names(data)
tab_model_results<-fx_model_linear('Sepal.Length','Species')
tab_model_results
fx_model_linear<-function(y,x){
f<-formula(paste0(y,"~",x))
model<-lm(f,data)
ret<-data.frame(Independent_variable=names(coef(model)),
Estimate=paste0(round(coef(model),3)," (",
round(confint(model)[,1],3),", ",
round(confint(model)[,2],3),")"),
Pvalue=round(summary(model)$coef[,4],4),
row.names=NULL)
ret$Pvalue[ret$Pvalue==0]<-'<0.0001'
colnames(ret)<-c("Predictor","Estimate (95% CI)","PValue")
return(ret)
}
tab_model_results<-fx_model_linear('Sepal.Length','Species')
tab_model_results
install.packages('devtools')
library('devtools')
devtools::install_github("klutometis/roxygen")
library(roxygen2)
devtools::install_github("klutometis/roxygen")
library('roxygen2')
log(1/50,base=10)
log(1,base=10) -log(50,base=10)
log(1,base=10)
